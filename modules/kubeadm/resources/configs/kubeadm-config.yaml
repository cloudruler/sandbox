%{ if node_type == "master" ~}
kind: InitConfiguration
apiVersion: kubeadm.k8s.io/v1beta2
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: ${bootstrap_token}
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
nodeRegistration:
  criSocket: unix:///run/containerd/containerd.sock
  kubeletExtraArgs:
    azure-container-registry-config: /etc/kubernetes/azure.json
    cloud-config: /etc/kubernetes/azure.json
    cloud-provider: azure
    #network-plugin: cni
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
#Only needed if you want to customize the key with which certs are encrypted when uploaded to the cluster
#certificateKey: "e6a2eb8581237ab72a4f494f30285ec12a9694d750b9785706a83bfcbbbd2204"
%{ else ~}
kind: JoinConfiguration
apiVersion: kubeadm.k8s.io/v1beta2
discovery:
  bootstrapToken:
    apiServerEndpoint: ${api_server_name}:6443
    token: ${bootstrap_token}
    unsafeSkipCAVerification: false
    caCertHashes:
    - ${discovery_token_ca_cert_hash}
  tlsBootstrapToken: ${bootstrap_token}
nodeRegistration:
  criSocket: unix:///run/containerd/containerd.sock
  kubeletExtraArgs:
    #address: 0.0.0.0
    #anonymous-auth: false
    #authentication-token-webhook: true
    #authorization-mode: Webhook
    azure-container-registry-config: /etc/kubernetes/azure.json
    #cgroups-per-qos: true
    #client-ca-file: /etc/kubernetes/certs/ca.crt
    cloud-config: /etc/kubernetes/azure.json
    cloud-provider: azure
    #cluster-dns: 10.0.0.10
    cluster-domain: cluster.local
    #enforce-node-allocatable: pods
    #event-qps: 0
    #eviction-hard: memory.available<750Mi,nodefs.available<10%,nodefs.inodesFree<5%
    #feature-gates: RotateKubeletServerCertificate=true
    healthz-port: 10248
    #image-gc-high-threshold: 85
    #image-gc-low-threshold: 80
    #image-pull-progress-deadline: 30m
    #keep-terminated-pod-volumes: false
    #kubeconfig: /var/lib/kubelet/kubeconfig
    max-pods: 30
    #network-plugin: cni
    node-status-update-frequency: 10s
    non-masquerade-cidr: 0.0.0.0/0
    #pod-infra-container-image: mcr.microsoft.com/oss/kubernetes/pause:1.4.1
    #pod-manifest-path: /etc/kubernetes/manifests
    #pod-max-pids: -1
    #protect-kernel-defaults: true
    #read-only-port: 0
    #register-with-taints: node-role.kubernetes.io/master=true:NoSchedule
    #resolv-conf: /run/systemd/resolve/resolv.conf
    #rotate-certificates: true
    #streaming-connection-idle-timeout: 4h
    #tls-cert-file: /etc/kubernetes/certs/kubeletserver.crt
    #tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
    #tls-private-key-file: /etc/kubernetes/certs/kubeletserver.key
    #v: 2
    volume-plugin-dir: /etc/kubernetes/volumeplugins
%{ endif ~}
---
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta2
controlPlaneEndpoint: ${api_server_name}
# apiServer:
#   certSANS:
#     - k8s.cloudruler.io
networking:
  podSubnet: ${subnet_cidr}
  #serviceSubnet: ${k8s_service_subnet}
apiServer:
  extraArgs:
    #advertise-address: 10.255.255.5
    allow-privileged: true
    anonymous-auth: false
    audit-log-maxage: '30'
    audit-log-maxbackup: '10'
    audit-log-maxsize: '100'
    audit-log-path: /var/log/kubeaudit/audit.log
    audit-policy-file: /etc/kubernetes/addons/audit-policy.yaml
    #authorization-mode: Node,RBAC
    azure-container-registry-config: /etc/kubernetes/azure.json
    cloud-config: /etc/kubernetes/azure.json
    cloud-provider: azure
    #bind-address: '0.0.0.0' 
    #client-ca-file: /etc/kubernetes/certs/ca.crt
    enable-admission-plugins: NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,ValidatingAdmissionWebhook,ResourceQuota,ExtendedResourceToleration,PodSecurityPolicy
    #enable-bootstrap-token-auth: 'true'
    #etcd-cafile: /etc/kubernetes/certs/ca.crt
    #etcd-certfile: /etc/kubernetes/certs/etcdclient.crt
    #etcd-keyfile: /etc/kubernetes/certs/etcdclient.key
    #etcd-servers: https://127.0.0.1:2379
    #insecure-port: '0'
    #kubelet-client-certificate: /etc/kubernetes/certs/client.crt
    #kubelet-client-key: /etc/kubernetes/certs/client.key
    #profiling: 'false'
    #proxy-client-cert-file: /etc/kubernetes/certs/proxy.crt
    #proxy-client-key-file: /etc/kubernetes/certs/proxy.key
    #requestheader-allowed-names: 
    #requestheader-client-ca-file: /etc/kubernetes/certs/proxy-ca.crt
    #requestheader-extra-headers-prefix: X-Remote-Extra-
    #requestheader-group-headers: X-Remote-Group
    #requestheader-username-headers: X-Remote-User
    #secure-port: '443'
    #service-account-key-file: /etc/kubernetes/certs/apiserver.key
    #service-account-lookup: true
    #service-cluster-ip-range: 10.0.0.0/16
    #storage-backend: etcd3
    #tls-cert-file: /etc/kubernetes/certs/apiserver.crt
    #tls-cipher-suites: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    #tls-private-key-file: /etc/kubernetes/certs/apiserver.key
    #v: '4'
controllerManager:
  extraArgs:
    allocate-node-cidrs: 'false'
    azure-container-registry-config: /etc/kubernetes/azure.json
    cloud-config: /etc/kubernetes/azure.json
    cloud-provider: azure
    #cluster-cidr: 10.240.0.0/12
    #cluster-name: cloudruleraksengine
    #cluster-signing-cert-file: /etc/kubernetes/certs/ca.crt
    #cluster-signing-key-file: /etc/kubernetes/certs/ca.key
    configure-cloud-routes: 'false'
    controllers: '*,bootstrapsigner,tokencleaner'
    feature-gates: LocalStorageCapacityIsolation=true,ServiceNodeExclusion=true
    #kubeconfig: /etc/kubernetes/kubelet.conf
    leader-elect: 'true'
    node-monitor-grace-period: 40s
    pod-eviction-timeout: 5m0s
    profiling: false
    #root-ca-file: /etc/kubernetes/certs/ca.crt
    route-reconciliation-period: 10s
    #service-account-private-key-file: /etc/kubernetes/certs/apiserver.key
    terminated-pod-gc-threshold: '5000'
    use-service-account-credentials: 'true'
    #v: '2'
scheduler:
  extraArgs:
    #kubeconfig: /etc/kubernetes/kubelet.conf
    leader-elect: 'true'
    profiling: 'false'
    #v: '2'
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
cgroupDriver: systemd
# clusterDNS:
# - ${cluster_dns}
#staticPodPath: /etc/kubernetes/manifests