#cloud-config
ssh_authorized_keys:
#brianmoore
- ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+HxnuN1D7vtkxABtAxRizT2RrUha45M3qBABWKBJAEJqev9gUC0zRxAwW6Eh8lhfv9jKcnekMkOZNPrR/Bx5cuv0hACDxF4nb2trcFTK2IOuaGidk3zld71jQYDnpVes9BSqcMkn9nmx8Nl7p5KPt1foTSezdZq/neiOZ/vV5r8iPmSOwxigYFP2G70P2dMFTY+KyoWDk60WAjr2g6EHSdI4GgR6kghgMAcVuljnseDJVLmYn8I/B2FSXH7APtd0h6J673S8wPZuNzIEYzm/KEobBn0EpnhyqfOjN5VLdNOUGpXb/VPNXeKaB3KoOzEh20FkaVJmNXlN0WKC1hyCl brian@DESKTOP-SFIVOEU
package_upgrade: true
packages:
#Install packages needed to use the Kubernetes apt repository:
- apt-transport-https
- ca-certificates
- curl
write_files:
- path: /etc/environment
  #Suppress Warning: apt-key output should not be parsed (stdout is not a terminal)
  content: |
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE="1"
  append: true
  #Configuration for containerd
- path: /etc/containerd/config.toml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${configs_containerd}
# kubeadm config file
- path: /etc/kubeadm/config.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${configs_kubeadm}
#Make sure that the overlay and br_netfilter module is loaded
- path: /etc/modules-load.d/k8s.conf
  permissions: '0644'
  content: |
    overlay
    br_netfilter
#As a requirement for your Linux Node's iptables to correctly see bridged traffic, you should ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl config
- path: /etc/sysctl.d/k8s.conf
  permissions: '0644'
  content: |
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables  = 1
    net.ipv4.ip_forward                 = 1
#Install Azure CNI plugin
- path: /etc/kubeadm/install-cni-plugin.sh
  permissions: '0744'
  encoding: gzip
  content: !!binary |
    ${ scripts_install_cni_plugin }
#Azure CNI network config file. IP 169.254.20.10 represents Azure platform services
- path: /etc/cni/net.d/10-azure.conflist
  permissions: '0644'
  content: |
    {
      "cniVersion":"0.3.0",
      "name":"azure",
      "plugins":[
          {
            "type":"azure-vnet",
            "mode":"transparent",
            "ipsToRouteViaHost":["169.254.20.10"],
            "ipam":{
                "type":"azure-vnet-ipam"
            }
          },
          {
            "type":"portmap",
            "capabilities":{
                "portMappings":true
            },
            "snat":true
          }
      ]
    }
%{ if node_type == "master" ~}
#Azure Cloud Controller Manager Configuration
- path: /etc/kubernetes/azure.json
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${ configs_azure }
#Manifests
#The addon manager will apply the addons to the cluster and maintain their state
- path: /etc/kubernetes/manifests/kube-addon-manager.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${ manifests_kube_addon_manager }
#Addons
- path: /etc/kubernetes/addons/azure-cloud-provider.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${ addons_azure_cloud_provider }
- path: /etc/kubernetes/addons/azure-cni-networkmonitor.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${ addons_azure_cni_networkmonitor }
- path: /etc/kubernetes/addons/ip-masq-agent.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${ addons_ip_masq_agent }
- path: /etc/kubernetes/addons/metrics-server.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${ addons_metrics_server }
- path: /etc/kubernetes/addons/pod-security-policy.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${ addons_pod_security_policy }
%{ endif ~}
runcmd:
#Set up dependencies
- [ modprobe, overlay ]
- [ modprobe, br_netfilter ]
#Apply the /etc/sysctl.d/k8s.conf config file to enable IP forwarding and netfilter settings across reboots
- [ sysctl, --system ]
#Download Docker's official GPG key
- [ sh, -c, 'curl -s https://download.docker.com/linux/ubuntu/gpg | apt-key add -' ]
#Set up docker's stable repository
- [ sh, -c, 'echo deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable > /etc/apt/sources.list.d/docker.list' ]
#Download the Google Cloud public signing key
- [ sh, -c, 'curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -' ]
#Add the Kubernetes apt repository:
- [ sh, -c, 'echo deb https://apt.kubernetes.io/ kubernetes-xenial main > /etc/apt/sources.list.d/kubernetes.list' ]
- [ apt-get, update ]
#Install Azure CNI plugin. Plugin is used by containerd, so it must run before containerd starts.
- [ /etc/kubeadm/install-cni-plugin.sh, v1.2.8, v0.9.1 ]
#Install packages
- [ sh, -c, 'apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" containerd.io' ]
- [ apt-get, install, -y, kubelet=1.20.4-00, kubeadm=1.20.4-00, kubectl=1.20.4-00 ]
- [ apt-mark, hold, kubelet, kubeadm, kubectl ]
#Install containerd as the container runtime
- [ mkdir, -p, /etc/containerd ]
- [ systemctl, restart, containerd ]
%{ if node_type == "master" ~}
#If this is a master node, grab the certs we need
- [ mkdir, -p, /etc/kubernetes/pki/etcd ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes"]}.crt, /etc/kubernetes/pki/ca.crt ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes"]}.prv, /etc/kubernetes/pki/ca.key ]
- [ cp, /var/lib/waagent/${certificates["ca-etcd"]}.crt, /etc/kubernetes/pki/etcd/ca.crt ]
- [ cp, /var/lib/waagent/${certificates["ca-etcd"]}.prv, /etc/kubernetes/pki/etcd/ca.key ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes-front-proxy"]}.crt, /etc/kubernetes/pki/front-proxy-ca.crt ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes-front-proxy"]}.prv, /etc/kubernetes/pki/front-proxy-ca.key ]
#Initialize the cluster
- [ sh, -c, 'kubeadm init --config /etc/kubeadm/config.yaml' ]
#- [ kubectl, apply, -f https://raw.githubusercontent.com/Azure/acs-engine/master/parts/k8s/addons/kubernetesmasteraddons-azure-npm-daemonset.yaml ]
- [ mkdir, -p, /home/${admin_username}/.kube ]
- [ cp, /etc/kubernetes/admin.conf, /home/${admin_username}/.kube/config ]
- [ chown, '${admin_username}:${admin_username}', /home/${admin_username}/.kube/config ]
%{ else ~}
#Join the worker to the cluster
- [ sh, -c, 'kubeadm join --config /etc/kubeadm/config.yaml']
%{ endif ~}
#Set up rules to Source NAT anything not destined for the landing zone vnet CIDR
#- [ sh, -c, 'iptables -t nat -A POSTROUTING -m iprange ! --dst-range 168.63.129.16 -m addrtype ! --dst-type local ! -d ${vnet_cidr} -j MASQUERADE' ]
#sudo kubectl apply -f https://raw.githubusercontent.com/Azure/acs-engine/master/parts/k8s/addons/kubernetesmasteraddons-azure-npm-daemonset.yaml
#kubectl apply -f https://raw.githubusercontent.com/Azure/azure-container-networking/master/npm/azure-npm.yaml