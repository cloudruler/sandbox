#cloud-config
ssh_authorized_keys:
    #brianmoore
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+HxnuN1D7vtkxABtAxRizT2RrUha45M3qBABWKBJAEJqev9gUC0zRxAwW6Eh8lhfv9jKcnekMkOZNPrR/Bx5cuv0hACDxF4nb2trcFTK2IOuaGidk3zld71jQYDnpVes9BSqcMkn9nmx8Nl7p5KPt1foTSezdZq/neiOZ/vV5r8iPmSOwxigYFP2G70P2dMFTY+KyoWDk60WAjr2g6EHSdI4GgR6kghgMAcVuljnseDJVLmYn8I/B2FSXH7APtd0h6J673S8wPZuNzIEYzm/KEobBn0EpnhyqfOjN5VLdNOUGpXb/VPNXeKaB3KoOzEh20FkaVJmNXlN0WKC1hyCl brian@DESKTOP-SFIVOEU
package_upgrade: true
packages: 
- apt-transport-https
- ca-certificates
- curl
write_files:
- path: /etc/containerd/config.toml
  permissions: '0644'
  encoding: b64
  content: test
- path: /tmp/kubeadm-config.yml
  permissions: '0644'
  encoding: b64
  content: |
    apiVersion: kubelet.config.k8s.io/v1beta1
    kind: KubeletConfiguration
    cgroupDriver: systemd
    ---
    apiVersion: kubeadm.k8s.io/v1beta2
    kind: ClusterConfiguration
- path: /etc/modules-load.d/k8s.conf
  permissions: '0644'
  content: |
    overlay
    br_netfilter
- path: /etc/sysctl.d/k8s.conf
  permissions: '0644'
  content: |
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables  = 1
    net.ipv4.ip_forward                 = 1
- path: /etc/cni/net.d/azure-cni.conf
  permissions: '0644'
  content: |
    {
        "cniVersion":"0.3.0",
        "name":"azure",
        "plugins":[
            {
                "type":"azure-vnet",
                "mode":"bridge",
                "bridge":"azure0",
                "ipam":{
                    "type":"azure-vnet-ipam"
                }
            },
            {
                "type":"portmap",
                "capabilities":{
                    "portMappings":true
                },
                "snat":true
            }
        ]
    }
- path: /tmp/install-cni-plugin.sh
  permissions: '0744'
  content: |
    #!/usr/bin/env bash

    # Installs azure-vnet CNI plugins on a Linux node.

    # Arguments.
    PLUGIN_VERSION=$1
    CNI_VERSION=$2
    CNI_BIN_DIR=/opt/cni/bin
    CNI_NETCONF_DIR=/etc/cni/net.d

    function usage
    {
        printf "Installs azure-vnet CNI plugins.\n"
        printf "Usage: install-cni-plugin version [cniVersion]\n"
    }

    if [ "$PLUGIN_VERSION" = "" ]; then
        usage
        exit 1
    fi

    if [ "$CNI_VERSION" = "" ]; then
        CNI_VERSION=v0.4.0
    fi

    # Create CNI directories.
    printf "Creating CNI directories.\n"
    mkdir -p $CNI_BIN_DIR
    mkdir -p $CNI_NETCONF_DIR

    # Install ebtables.
    if [ ! -e /sbin/ebtables ]
    then
        printf "Installing ebtables package..."
        apt-get update
        apt-get install -y ebtables
        printf "done.\n"
    else
        echo "Package ebtables is already installed."
    fi
    /sbin/ebtables --list > /dev/null

    # Install azure-vnet CNI plugins.
    printf "Installing azure-vnet CNI plugin version $PLUGIN_VERSION to $CNI_BIN_DIR..."
    /usr/bin/curl -sSL https://github.com/Azure/azure-container-networking/releases/download/$PLUGIN_VERSION/azure-vnet-cni-linux-amd64-$PLUGIN_VERSION.tgz > $CNI_BIN_DIR/azure-vnet.tgz
    tar -xzf $CNI_BIN_DIR/azure-vnet.tgz -C $CNI_BIN_DIR
    printf "done.\n"

    # Install azure-vnet CNI network configuration file.
    printf "Installing azure-vnet CNI network configuration file to $CNI_NETCONF_DIR..."
    mv $CNI_BIN_DIR/*.conflist $CNI_NETCONF_DIR
    printf "done.\n"

    # Install loopback plugin.
    printf "Installing loopback CNI plugin version $CNI_VERSION to $CNI_BIN_DIR..."
    /usr/bin/curl -sSL https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION/cni-plugins-linux-amd64-$CNI_VERSION.tgz > $CNI_BIN_DIR/cni.tgz
    tar -xzf $CNI_BIN_DIR/cni.tgz -C $CNI_BIN_DIR ./loopback
    printf "done.\n"

    # Cleanup.
    rm $CNI_BIN_DIR/*.tgz
    chown root:root $CNI_BIN_DIR/*

    printf "azure-vnet CNI plugin is successfully installed.\n"
runcmd:
- [ modprobe, overlay ]
- [ modprobe, br_netfilter ]
- [ sysctl, --system ]
#Download Docker's official GPG key
- [ sh, -c, 'curl -s https://download.docker.com/linux/ubuntu/gpg | apt-key add -' ]
#Set up docker's stable repository
- [ sh, -c, 'echo deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable > /etc/apt/sources.list.d/docker.list' ]
#Download the Google Cloud public signing key
- [ sh, -c, 'curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -' ]
#Add the Kubernetes apt repository:
- [ sh, -c, 'echo deb https://apt.kubernetes.io/ kubernetes-xenial main > /etc/apt/sources.list.d/kubernetes.list' ]
- [ apt-get, update ]
#Install packages
- [ apt-get, install, -y, containerd.io, kubelet=1.20.4-00, kubeadm=1.20.4-00, kubectl=1.20.4-00 ]
- [ apt-mark, hold, kubelet, kubeadm, kubectl ]
#Install Azure CNI plugin
- [ /tmp/install-cni-plugin.sh, v1.2.7, v0.9.1 ]
#Set up rules to Source NAT anything not destined for the landing zone vnet 10.1.0.0/15
- [ sh, -c, 'iptables -t nat -A POSTROUTING -m iprange ! --dst-range 168.63.129.16 -m addrtype ! --dst-type local ! -d 10.1.0.0/15 -j MASQUERADE' ]
#Install containerd as the container runtime
- [ mkdir, -p, /etc/containerd ]
- [ sh, -c, 'containerd config default > /etc/containerd/config.toml' ]
- [ systemctl, restart, containerd ]
#kubeadm config images pull --cri-socket unix:///run/containerd/containerd.sock
#kubeadm init --control-plane-endpoint=k8s.cloudruler.io --cri-socket unix:///run/containerd/containerd.sock --config  --v=10 --pod-network-cidr 10.1.0.0/
#sudo 
#sudo crictl --runtime-endpoint unix:///run/containerd/containerd.sock logs CONTAINERID
#container-runtime=remote   --container-runtime-endpoint=<path>    --cgroup-driver
#--cri-socket
#sudo cat -n /var/log/cloud-init-output.log
#grep -i -n --color error /var/log/cloud-init.log
#cloud-init devel schema --config-file bob.txt

# #Configure IP configurations inside ubuntu
# #TODO need to assign IP addresses
# - path: /etc/netplan/60-static.yaml
#   permissions: '0644'
#   content: |
#     network:
#         version: 2
#         ethernets:
#             eth0:
#                 addresses:
#                     - 10.0.0.6/24